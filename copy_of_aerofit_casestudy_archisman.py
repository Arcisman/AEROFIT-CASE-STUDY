# -*- coding: utf-8 -*-
"""Copy of Aerofit-casestudy ARCHISMAN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_CJZE5OfjP2lbRkPApa34LFHlm9wTCBm

**Introduction:**

‚ùì What is Aerofit?
1. Aerofit, a dynamic player in the fitness industry,
traces its origins to M/s. Sachdev Sports Co, established in 1928 by Ram Ratan Sachdev. From its modest beginnings in Hyderabad, India, the company evolved into a leading sports equipment supplier across Andhra Pradesh and Telangana. Recognizing the growing need for fitness solutions, M/s. Sachdev Overseas emerged to import quality fitness equipment under the "Aerofit" brand, ensuring affordability and post-sales excellence.

2. Driven by a dedication to innovation, Nityasach Fitness Pvt Ltd was founded, spearheaded by director Nityesh Sachdev. With the brand "Aerofit" at its core, the company aimed to bridge the gap between international fitness technology and the Indian market. By importing advanced fitness equipment at accessible price points, Aerofit sought to redefine the industry landscape, prioritizing health and vitality while staying true to its legacy of passion and customer focus.

3.Aerofit provides a product range including machines such as treadmills, exercise bikes, gym equipment, and fitness accessories to cater to the needs of all categories of people.

üéØ Objective
Create comprehensive customer profiles for each AeroFit treadmill product through descriptive analytics. Develop two-way contingency tables and analyze conditional and marginal probabilities to discern customer characteristics, facilitating improved product recommendations and informed business decisions.

üìö About Data

The company collected the data on individuals who purchased a treadmill from the AeroFit stores during three months.The data is available in a single csv file

Product Portfolio

1. The KP281 is an entry-level treadmill that sells for USD 1,500.

2. The KP481 is for mid-level runners that sell for USD 1,750.

3. The KP781 treadmill is having advanced features that sell for USD 2,500.

üìÉ Features of the dataset:
1. Feature	Description
2. Product	Product Purchased: KP281, KP481, or KP781
3  Age	Age of buyer in years
4. Gender	Gender of buyer (Male/Female)
5. Education	Education of buyer in years
6. MaritalStatus	MaritalStatus of buyer (Single or partnered)
7. Usage	The average number of times the buyer plans to use the treadmill each week
8. Income	Annual income of the buyer (in $)
9. Fitness	Self-rated fitness on a 1-to-5 scale, where 1 is the poor shape and 5 is the excellent shape
10. Miles	The average number of miles the buyer expects to walk/run each week

2. **Exploratory Data Analysis**
"""

from google.colab import files
uploaded = files.upload()

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
df = pd.read_csv ('aerofit_treadmill.csv')
df.shape

df.head()

df.tail()

df.describe()

"""üîç **Insights**
1. Age - The age range of customers spans from 18 to 50 year, with an average age of 29 years.

2. Education - Customer education levels vary between 12 and 21 years, with an average education duration of 16 years.

3. Usage - Customers intend to utilize the product anywhere from 2 to 7 times per week, with an average usage frequency of 3 times per week.

4. Fitness - On average, customers have rated their fitness at 3 on a 5-point scale, reflecting a moderate level of fitness.

5. Income - The annual income of customers falls within the range of USD 30,000 to USD 100,000, with an average income of approximately USD 54,000.

6. Miles - Customers' weekly running goals range from 21 to 360 miles, with an average target of 103 miles per week.
"""

df.info()

"""üîç **Insights**

From the above analysis, it is clear that, data has total of 9 features with mixed alpha numeric data. Also we can see that there is no missing data in the columns.

The data type of all the columns are matching with the data present in them.

++++Adding price of the product in the Table:
"""

price_map = { 'KP281' : 1500 , 'KP481' : 1750 , 'KP781' : 2500}
df['Price_in_USD'] = df['Product'].map(price_map)

df.head()

df.describe (include = 'object')

"""üîç **Insights**


1. Product - Over the past three months, the KP281 product demonstrated the highest sales performance among the three products, accounting for approximately 44% of total sales.

2. Gender - Based on the data of last 3 months, around 58% of the buyers were Male and 42% were female

3. Marital Status - Based on the data of last 3 months, around 60% of the buyers were Married and 40% were single
"""

df.duplicated().value_counts()

"""**üîç Insights**

There are no duplicate entries in the dataset

**Sanity check for columns:**
"""

for i in df.columns:
  print ('Unique values in ',i,'column are:')
  print (df[i].unique())

"""**üîç Insights**

The dataset does not contain any abnormal values.

‚ûï **Adding new columns for better analysis**

Creating New Column and Categorizing values in Age,Education,Income and Miles to different classes for better visualization

**Age Column**

Categorizing the values in age column in 4 different buckets:
Young Adult: from 18 - 25
Adults: from 26 - 35
Middle Aged Adults: 36-45
Elder :46 and above

**Education Column**

Categorizing the values in education column in 3 different buckets:
Primary Education: upto 12
Secondary Education: 13 to 15
Higher Education: 16 and above

**Income Column**

Categorizing the values in Income column in 4 different buckets:
Low Income - Upto 40,000
Moderate Income - 40,000 to 60,000
High Income - 60,000 to 80,000
Very High Income - Above 80,000

**Miles column**

Categorizing the values in miles column in 4 different buckets:
Light Activity - Upto 50 miles
Moderate Activity - 51 to 100 miles
Active Lifestyle - 101 to 200 miles
Fitness Enthusiast - Above 200 miles

**Weekly usages**

Categorizing the values in usages column in 3 different buckets:

Low -  0 to 2 days

Medium - 2 to 3 days

High - 3 to 5 days

**Fitness Freaks**

Categorizing the values in Fitness column in 3 different buckets:

Low -  0 to 2

Medium - 2 to 3

High - 3 to 5
"""

bin_range1 = [17,25,35,45,float('inf')]
bin_labels1 = ['Youth', 'Adults', 'Middle_aged', 'Elders']

df['age_group'] = pd.cut(df['Age'],bins = bin_range1,labels = bin_labels1)

#binning the education values into categories
bin_range2 = [0,12,15,float('inf')]
bin_labels2 = ['Primary', 'Secondary', 'Higher']

df['edu_group'] = pd.cut(df['Education'],bins = bin_range2,labels = bin_labels2)

#binning the income values into categories
bin_range3 = [0,40000,60000,80000,float('inf')]
bin_labels3 = ['Low Income','Moderate Income','High Income','Very High Income']

df['income_group'] = pd.cut(df['Income'],bins = bin_range3,labels = bin_labels3)

#binning the miles values into categories
bin_range4 = [0,50,100,200,float('inf')]
bin_labels4 = ['Light Activity', 'Moderate Activity', 'Active Lifestyle', 'Fitness Enthusiast ']

df['miles_group'] = pd.cut(df['Miles'],bins = bin_range4,labels = bin_labels4)

#binning the usage values into categories

bin_range5 = [0,2,3,5]
bin_labels5 = ['Low','Medium','High']

df['usage_group'] = pd.cut(df['Usage'],bins = bin_range5, labels = bin_labels5)

#binning the Fitness values into categories
bin_range6 = [0,2,3,5]
bin_labels6 = ['Low','Medium','High']

df['Fitness_group'] = pd.cut(df['Fitness'],bins = bin_range6, labels = bin_labels6)
df.head(50)

"""**Univariate Analysis**

**üí∞ Product Sales Distribution**

"""

#setting the plot style

fig = plt.figure(figsize = (12,5))
gs = fig.add_gridspec(2,2)

                                            #creating plot for product column

ax0 = fig.add_subplot(gs[:,0])

product_count = df['Product'].value_counts()

color_map = ["#0e4f66", "#4b4b4c",'#99AEBB']

ax0.bar(product_count.index,product_count.values,color = color_map,zorder = 2)

#adding the value_counts
for i in product_count.index:
    ax0.text(i,product_count[i]+2,product_count[i],{'font':'serif','size' : 10},ha = 'center',va = 'center')

#adding grid lines
ax0.grid(color = 'black',linestyle = '--', axis = 'y', zorder = 0, dashes = (5,10))

#removing the axis lines
for s in ['top','left','right']:
    ax0.spines[s].set_visible(False)

#adding axis label
ax0.set_ylabel('Units Sold',fontfamily='serif',fontsize = 12)

                                            #creating a plot for product % sale

ax1 = fig.add_subplot(gs[0,1])

product_count['percent'] = ((product_count.values/df.shape[0])* 100).round()

ax1.barh(product_count.index[0],product_count.loc['percent'][0],color = "#0e4f66")
ax1.barh(product_count.index[0],product_count.loc['percent'][1],left = product_count.loc['percent'][0],color = '#4b4b4c')
ax1.barh(product_count.index[0],product_count.loc['percent'][2],
         left = product_count.loc['percent'][0] + product_count.loc['percent'][1], color = '#99AEBB')
ax1.set(xlim=(0,100))


# adding info to the each bar
product_count['info_percent'] =[product_count['percent'][0]/2,product_count['percent'][0] + product_count['percent'][1]/2,
                                 product_count['percent'][0] + product_count['percent'][1] + product_count['percent'][2]/2]
for i in range(3):
    ax1.text(product_count['info_percent'][i],0.04,f"{product_count['percent'][i]:.0f}%",
             va = 'center', ha='center',fontsize=25, fontweight='light', fontfamily='serif',color='white')

    ax1.text(product_count['info_percent'][i],-0.2,product_count.index[i],
             va = 'center', ha='center',fontsize=15, fontweight='light', fontfamily='serif',color='white')

#removing the axis lines
ax1.axis('off')

                                        #creating a plot for product portfolio

ax2 = fig.add_subplot(gs[1,1])

product_portfolio = [['KP281','$1500','$120k'],['KP481','$1750','$105k'],['KP781','$2500','$100k']]
color_2d = [['#0e4f66','#FFFFFF','#FFFFFF'],['#4b4b4c','#FFFFFF','#FFFFFF'],['#99AEBB','#FFFFFF','#FFFFFF']]

table = ax2.table(cellText = product_portfolio, cellColours=color_2d, cellLoc='center',colLabels =['Product','Price','Sales'],
                  colLoc = 'center',bbox =[0, 0, 1, 1])

table.set_fontsize(13)

#removing axis
ax2.axis('off')

#adding title to the visual
fig.suptitle('Product Sales Distribution',fontproperties = {'family':'serif', 'size':15,'weight':'bold'})

plt.show()

"""**üîç Insights**


The KP281 treadmill model, positioned as an entry-level product, has the highest number of units sold, trailed by the KP481 (mid-level) and KP781 (advanced) models.

All three models have nearly equal contributions in terms of generating sales revenue.

**üôéüèª‚Äç‚ôÄÔ∏èüôéüèª‚Äç‚ôÇÔ∏è Gender and üë©üèª‚Äçü§ù‚ÄçüßëüèªMarital Status Disribution**
"""

df['MaritalStatus'].value_counts()

marital_counts = df['MaritalStatus'].value_counts()
plt.figure(figsize=(6, 6))
plt.pie(marital_counts, labels=marital_counts.index, autopct='%1.2f%%', startangle=140)
plt.title('Marital Status Distribution')
plt.axis('equal')  # Ensures pie is a circle
plt.show()

df['Gender'].value_counts()

Gender_ratio = df['Gender'].value_counts()
plt.figure(figsize=(6, 6))
plt.pie(Gender_ratio, labels=Gender_ratio.index, autopct='%1.2f%%', startangle=140)
plt.title('Gender Distribution')
plt.axis('equal')  # Ensures pie is a circle
plt.show()

"""**Buyer üèãüèª‚Äç‚ôÄÔ∏è Fitness and üèÉüèª‚Äç‚ôÇÔ∏èTreadmill Usage**"""

#setting the plot style
fig = plt.figure(figsize = (15,10))
gs = fig.add_gridspec(2,2,height_ratios=[0.65, 0.35])

                                        # creating bar chart for usage disribution

ax0 = fig.add_subplot(gs[0,0])
temp = df['Usage'].value_counts()
color_map = ["#3A7089", "#4b4b4c",'#99AEBB','#5C8374','#7A9D54','#9EB384']
ax0.bar(x=temp.index,height = temp.values,color = color_map,zorder = 2)

#adding the value_counts
for i in temp.index:
    ax0.text(i,temp[i]+2,temp[i],{'font':'serif','size' : 10},ha = 'center',va = 'center')

#adding grid lines
ax0.grid(color = 'black',linestyle = '--', axis = 'y', zorder = 0, dashes = (5,10))

#removing the axis lines
for s in ['top','left','right']:
    ax0.spines[s].set_visible(False)

#adding axis label
ax0.set_ylabel('Count',fontweight = 'bold',fontsize = 12)
ax0.set_xlabel('Usage Per Week',fontweight = 'bold',fontsize = 12)
ax0.set_xticklabels(temp.index,fontweight = 'bold')

#setting title for visual
ax0.set_title('Usage Count',{'font':'serif', 'size':15,'weight':'bold'})

                                        #creating a info table for usage

ax1 = fig.add_subplot(gs[1,0])
usage_info = [['3','38%'],['4','29%'],['2','19%'],['5','9%'],['6','4%'],['7','1%']]
color_2d = [["#3A7089",'#FFFFFF'],["#4b4b4c",'#FFFFFF'],['#99AEBB','#FFFFFF'],['#5C8374','#FFFFFF'],['#7A9D54','#FFFFFF'],
           ['#9EB384','#FFFFFF']]

table = ax1.table(cellText = usage_info, cellColours=color_2d, cellLoc='center',colLabels =['Usage Per Week','Percent'],
                  colLoc = 'center',bbox =[0, 0, 1, 1])

table.set_fontsize(13)

#removing axis
ax1.axis('off')

                                        # creating bar chart for fitness scale

ax2 = fig.add_subplot(gs[0,1])
temp = df['Fitness'].value_counts()
color_map = ["#3A7089", "#4b4b4c",'#99AEBB','#5C8374','#7A9D54','#9EB384']
ax2.bar(x=temp.index,height = temp.values,color = color_map,zorder = 2)

#adding the value_counts
for i in temp.index:
    ax2.text(i,temp[i]+2,temp[i],{'font':'serif','size' : 10},ha = 'center',va = 'center')

#adding grid lines
ax2.grid(color = 'black',linestyle = '--', axis = 'y', zorder = 0, dashes = (5,10))

#removing the axis lines
for s in ['top','left','right']:
    ax2.spines[s].set_visible(False)

#adding axis label
ax2.set_ylabel('Count',fontweight = 'bold',fontsize = 12)
ax2.set_xlabel('Fitness Scale',fontweight = 'bold',fontsize = 12)
ax2.set_xticklabels(temp.index,fontweight = 'bold')

#setting title for visual
ax2.set_title('Fitness Count',{'font':'serif', 'size':15,'weight':'bold'})

                                        #creating a info table for usage

ax1 = fig.add_subplot(gs[1,1])
fitness_info = [['3','54%'],['5','17%'],['2','15%'],['4','13%'],['1','1%']]
color_2d = [["#3A7089",'#FFFFFF'],["#4b4b4c",'#FFFFFF'],['#99AEBB','#FFFFFF'],['#5C8374','#FFFFFF'],['#7A9D54','#FFFFFF']]

table = ax1.table(cellText = fitness_info, cellColours=color_2d, cellLoc='center',colLabels =['Fitness','Percent'],
                  colLoc = 'center',bbox =[0, 0, 1, 1])

table.set_fontsize(13)

#removing axis
ax1.axis('off')


plt.show()

"""**üîç Insights**


Almost 85% of the customers plan to use the treadmill for 2 to 4 times a week and only 15% using 5 times and above each week

54% of the customers have self-evaluated their fitness at a level 3 on a scale of 1 to 5.

Furthermore, a substantial 84% of the total customers have rated themselves at 3 or higher, indicating commendable fitness levels.

**Numerical Variables**

**---  Customer Age Distribution**
"""

#setting the plot style

fig = plt.figure(figsize = (15,10))
gs = fig.add_gridspec(2,2,height_ratios=[0.65, 0.35],width_ratios = [0.6,0.4])

                                    #creating age histogram

ax0 = fig.add_subplot(gs[0,0])

ax0.hist(df['Age'],color= '#5C8374',linewidth=0.5,edgecolor='black')
ax0.set_xlabel('Age',fontsize = 12,fontweight = 'bold')
ax0.set_ylabel('Frequency',fontsize = 12,fontweight = 'bold')

#removing the axis lines
for s in ['top','left','right']:
    ax0.spines[s].set_visible(False)

#setting title for visual
ax0.set_title('Age Distribution',{'font':'serif', 'size':15,'weight':'bold'})


                                     #creating box plot for age

ax1 = fig.add_subplot(gs[1,0])
boxplot = ax1.boxplot(x = df['Age'],vert = False,patch_artist = True,widths = 0.5)

# Customize box and whisker colors
boxplot['boxes'][0].set(facecolor='#5C8374')

# Customize median line
boxplot['medians'][0].set(color='red')

# Customize outlier markers
for flier in boxplot['fliers']:
    flier.set(marker='o', markersize=8, markerfacecolor= "#4b4b4c")

#removing the axis lines
for s in ['top','left','right']:
    ax1.spines[s].set_visible(False)

#adding 5 point summary annotations
info = [i.get_xdata() for i in boxplot['whiskers']] #getting the upperlimit,Q1,Q3 and lowerlimit

median = df['Age'].quantile(0.5) #getting Q2

for i,j in info: #using i,j here because of the output type of info list comprehension

    ax1.annotate(text = f"{i:.1f}", xy = (i,1), xytext = (i,1.4),fontsize = 12,
                 arrowprops= dict(arrowstyle="<-", lw=1, connectionstyle="arc,rad=0"))

    ax1.annotate(text = f"{j:.1f}", xy = (j,1), xytext = (j,1.4),fontsize = 12,
                 arrowprops= dict(arrowstyle="<-", lw=1, connectionstyle="arc,rad=0"))

#adding the median separately because it was included in info list
ax1.annotate(text = f"{median:.1f}",xy = (median,1),xytext = (median + 2,1.4),fontsize = 12,
            arrowprops= dict(arrowstyle="<-", lw=1, connectionstyle="arc,rad=0"))

#removing y-axis ticks
ax1.set_yticks([])

#adding axis label
ax1.set_xlabel('Age',fontweight = 'bold',fontsize = 12)

                                    #creating age group bar chart

ax2 = fig.add_subplot(gs[0,1])
temp = df['age_group'].value_counts()
color_map = ["#3A7089", "#4b4b4c",'#99AEBB','#5C8374']
ax2.bar(x=temp.index,height = temp.values,color = color_map,zorder = 2)

#adding the value_counts
for i in temp.index:
    ax2.text(i,temp[i]+2,temp[i],{'font':'serif','size' : 10},ha = 'center',va = 'center')

#adding grid lines
ax2.grid(color = 'black',linestyle = '--', axis = 'y', zorder = 0, dashes = (5,10))

#removing the axis lines
for s in ['top','left','right']:
    ax2.spines[s].set_visible(False)

#adding axis label
ax2.set_ylabel('Count',fontweight = 'bold',fontsize = 12)
ax2.set_xticklabels(temp.index,fontweight = 'bold')

#setting title for visual
ax2.set_title('Age Group Distribution',{'font':'serif', 'size':15,'weight':'bold'})

                                        #creating a table for group info

ax3 = fig.add_subplot(gs[1,1])
age_info = [['Young Adults','44%','18 to 25'],['Adults','41%','26 to 35'],['Middle Aged','12%','36 to 45'],
            ['Elder','3%','Above 45']]
color_2d = [["#3A7089",'#FFFFFF','#FFFFFF'],["#4b4b4c",'#FFFFFF','#FFFFFF'],['#99AEBB','#FFFFFF','#FFFFFF'],
            ['#5C8374','#FFFFFF','#FFFFFF']]

table = ax3.table(cellText = age_info, cellColours=color_2d, cellLoc='center',colLabels =['Age','Probability','Group'],
                  colLoc = 'center',bbox =[0, 0, 1, 1])

table.set_fontsize(13)

#removing axis
ax3.axis('off')


plt.show()

"""**üîç Insights**


85% of the customers fall in the age range of 18 to 35. with a median age of 26, suggesting young people showing more interest in the companies products

**Outliers**

As we can see from the box plot, there are 3 outlier's present in the age data.

**üë®üèª‚Äçüéìüë©üèª‚Äçüéì Customer Education Distribution**
"""

#setting the plot style

fig = plt.figure(figsize = (15,10))
gs = fig.add_gridspec(2,2,height_ratios=[0.65, 0.35],width_ratios = [0.6,0.4])

                                    #creating education histogram

ax0 = fig.add_subplot(gs[0,0])

ax0.hist(df['Education'],color= '#5C8374',linewidth=0.5,edgecolor='black')
ax0.set_xlabel('Education in Years',fontsize = 12,fontweight = 'bold')
ax0.set_ylabel('Frequency',fontsize = 12,fontweight = 'bold')

#removing the axis lines
for s in ['top','left','right']:
    ax0.spines[s].set_visible(False)

#setting title for visual
ax0.set_title('Education Level Distribution',{'font':'serif', 'size':15,'weight':'bold'})


                                     #creating box plot for education

ax1 = fig.add_subplot(gs[1,0])
boxplot = ax1.boxplot(x = df['Education'],vert = False,patch_artist = True,widths = 0.5)

# Customize box and whisker colors
boxplot['boxes'][0].set(facecolor='#5C8374')

# Customize median line
boxplot['medians'][0].set(color='red')

# Customize outlier markers
for flier in boxplot['fliers']:
    flier.set(marker='o', markersize=8, markerfacecolor= "#4b4b4c")

#removing the axis lines
for s in ['top','left','right']:
    ax1.spines[s].set_visible(False)

#adding 5 point summary annotations
info = [i.get_xdata() for i in boxplot['whiskers']] #getting the upperlimit,Q1,Q3 and lowerlimit

median = df['Education'].quantile(0.5) #getting Q2

for i,j in info: #using i,j here because of the output type of info list comprehension

    ax1.annotate(text = f"{i:.1f}", xy = (i,1), xytext = (i,1.4),fontsize = 12,
                 arrowprops= dict(arrowstyle="<-", lw=1, connectionstyle="arc,rad=0"))

    ax1.annotate(text = f"{j:.1f}", xy = (j,1), xytext = (j,1.4),fontsize = 12,
                 arrowprops= dict(arrowstyle="<-", lw=1, connectionstyle="arc,rad=0"))


#removing y-axis ticks
ax1.set_yticks([])

#adding axis label
ax1.set_xlabel('Education in Years',fontweight = 'bold',fontsize = 12)

                                    #creating education group bar chart

ax2 = fig.add_subplot(gs[0,1])
temp = df['edu_group'].value_counts()
color_map = ["#3A7089", "#4b4b4c",'#99AEBB']
ax2.bar(x=temp.index,height = temp.values,color = color_map,zorder = 2,width = 0.6)

#adding the value_counts
for i in temp.index:
    ax2.text(i,temp[i]+2,temp[i],{'font':'serif','size' : 10},ha = 'center',va = 'center')

#adding grid lines
ax2.grid(color = 'black',linestyle = '--', axis = 'y', zorder = 0, dashes = (5,10))

#removing the axis lines
for s in ['top','left','right']:
    ax2.spines[s].set_visible(False)

#adding axis label
ax2.set_ylabel('Count',fontweight = 'bold',fontsize = 12)
ax2.set_xticklabels(temp.index,fontweight = 'bold',rotation = 7)

#setting title for visual
ax2.set_title('Education Group Count',{'font':'serif', 'size':15,'weight':'bold'})


                                        #creating a table for group info

ax3 = fig.add_subplot(gs[1,1])
edu_info = [['Higher','62%','Above 15'],['Secondary','36%','13 to 15'],['Primary','2%','0 to 12']]
color_2d = [["#3A7089",'#FFFFFF','#FFFFFF'],["#4b4b4c",'#FFFFFF','#FFFFFF'],['#99AEBB','#FFFFFF','#FFFFFF']]

table = ax3.table(cellText = edu_info, cellColours=color_2d, cellLoc='center',colLabels =['Education','Probability','Years'],
                  colLoc = 'center',bbox =[0, 0, 1, 1])

table.set_fontsize(13)

#removing axis
ax3.axis('off')


plt.show()

"""**üîç Insights**


98% of the customers have education more than 13 years highlighting a strong inclination among well-educated individuals to purchase the products. It's plausible that health awareness driven by education could play a pivotal role in this trend.

**Outliers**

As we can see from the box plot, there are 2 outlier's present in the education data.

**üí≤ Customer Income Distribution**
"""

#setting the plot style

fig = plt.figure(figsize = (15,10))
gs = fig.add_gridspec(2,2,height_ratios=[0.65, 0.35],width_ratios = [0.6,0.4])

                                    #creating Income histogram

ax0 = fig.add_subplot(gs[0,0])

ax0.hist(df['Income'],color= '#5C8374',linewidth=0.5,edgecolor='black')
ax0.set_xlabel('Income',fontsize = 12,fontweight = 'bold')
ax0.set_ylabel('Frequency',fontsize = 12,fontweight = 'bold')

#removing the axis lines
for s in ['top','left','right']:
    ax0.spines[s].set_visible(False)

#setting title for visual
ax0.set_title('Income Distribution',{'font':'serif', 'size':15,'weight':'bold'})


                                     #creating box plot for Income

ax1 = fig.add_subplot(gs[1,0])
boxplot = ax1.boxplot(x = df['Income'],vert = False,patch_artist = True,widths = 0.5)

# Customize box and whisker colors
boxplot['boxes'][0].set(facecolor='#5C8374')

# Customize median line
boxplot['medians'][0].set(color='red')

# Customize outlier markers
for flier in boxplot['fliers']:
    flier.set(marker='o', markersize=8, markerfacecolor= "#4b4b4c")

#removing the axis lines
for s in ['top','left','right']:
    ax1.spines[s].set_visible(False)

#adding 5 point summary annotations
info = [i.get_xdata() for i in boxplot['whiskers']] #getting the upperlimit,Q1,Q3 and lowerlimit

median = df['Income'].quantile(0.5) #getting Q2

for i,j in info: #using i,j here because of the output type of info list comprehension

    ax1.annotate(text = f"{i:.1f}", xy = (i,1), xytext = (i,1.4),fontsize = 12,
                 arrowprops= dict(arrowstyle="<-", lw=1, connectionstyle="arc,rad=0"))

    ax1.annotate(text = f"{j:.1f}", xy = (j,1), xytext = (j,1.4),fontsize = 12,
                 arrowprops= dict(arrowstyle="<-", lw=1, connectionstyle="arc,rad=0"))

#adding the median separately because it was included in info list
ax1.annotate(text = f"{median:.1f}",xy = (median,1),xytext = (median,0.6),fontsize = 12,
            arrowprops= dict(arrowstyle="<-", lw=1, connectionstyle="arc,rad=0"))

#removing y-axis ticks
ax1.set_yticks([])

#adding axis label
ax1.set_xlabel('Income',fontweight = 'bold',fontsize = 12)

                                    #creating Income group bar chart

ax2 = fig.add_subplot(gs[0,1])
temp = df['income_group'].value_counts()
color_map = ["#3A7089", "#4b4b4c",'#99AEBB','#5C8374']
ax2.bar(x=temp.index,height = temp.values,color = color_map,zorder = 2)

#adding the value_counts
for i in temp.index:
    ax2.text(i,temp[i]+2,temp[i],{'font':'serif','size' : 10},ha = 'center',va = 'center')

#adding grid lines
ax2.grid(color = 'black',linestyle = '--', axis = 'y', zorder = 0, dashes = (5,10))

#removing the axis lines
for s in ['top','left','right']:
    ax2.spines[s].set_visible(False)

#adding axis label
ax2.set_ylabel('Count',fontweight = 'bold',fontsize = 12)
ax2.set_xticklabels(temp.index,fontweight = 'bold',rotation = 9)

#setting title for visual
ax2.set_title('Income Group Count',{'font':'serif', 'size':15,'weight':'bold'})

                                        #creating a table group info

ax3 = fig.add_subplot(gs[1,1])
inc_info = [['Low','18%','Below 40k'],['Moderate','59%','40k to 60k'],['High','13%','60k to 80k'],
            ['Vey High','10%','Above 80k']]
color_2d = [["#4b4b4c",'#FFFFFF','#FFFFFF'],["#3A7089",'#FFFFFF','#FFFFFF'],['#99AEBB','#FFFFFF','#FFFFFF'],
            ['#5C8374','#FFFFFF','#FFFFFF']]

table = ax3.table(cellText = inc_info, cellColours=color_2d, cellLoc='center',
                  colLabels =['Income Grp','Probability','Income($)'],
                  colLoc = 'center',bbox =[0, 0, 1, 1])

table.set_fontsize(13)

#removing axis
ax3.axis('off')
bin_range3 = [0,40000,60000,80000,float('inf')]
bin_labels3 = ['Low Income','Moderate Income','High Income','Very High Income']

plt.show()

"""***üîç Insights***

Almost 60% of the customers fall in the income group of (40k to 60k) dollars suggesting higher inclination of this income group people towards the products.

Surprisingly 18% of the customers fall in the income group of (<40) suggesting almost 77% of the total customers fall in income group of below 60k and only 23% of them falling in 60k and above income group

**Outliers**

As we can see from the box plot, there are many outlier's present in the income data.

**üèÉüèª‚Äç‚ôÇÔ∏èüèÉüèª‚Äç‚ôÄÔ∏è Customers Expected Weekly Mileage**
"""

#setting the plot style

fig = plt.figure(figsize = (15,10))
gs = fig.add_gridspec(2,2,height_ratios=[0.65, 0.35],width_ratios = [0.55,0.45])

                                    #creating miles histogram

ax0 = fig.add_subplot(gs[0,0])

ax0.hist(df['Miles'],color= '#5C8374',linewidth=0.5,edgecolor='black')
ax0.set_xlabel('Miles',fontsize = 12,fontweight = 'bold')
ax0.set_ylabel('Frequency',fontsize = 12,fontweight = 'bold')

#removing the axis lines
for s in ['top','left','right']:
    ax0.spines[s].set_visible(False)

#setting title for visual
ax0.set_title('Miles Distribution',{'font':'serif', 'size':15,'weight':'bold'})


                                     #creating box plot for miles

ax1 = fig.add_subplot(gs[1,0])
boxplot = ax1.boxplot(x = df['Miles'],vert = False,patch_artist = True,widths = 0.5)

# Customize box and whisker colors
boxplot['boxes'][0].set(facecolor='#5C8374')

# Customize median line
boxplot['medians'][0].set(color='red')

# Customize outlier markers
for flier in boxplot['fliers']:
    flier.set(marker='o', markersize=8, markerfacecolor= "#4b4b4c")

#removing the axis lines
for s in ['top','left','right']:
    ax1.spines[s].set_visible(False)

#adding 5 point summary annotations
info = [i.get_xdata() for i in boxplot['whiskers']] #getting the upperlimit,Q1,Q3 and lowerlimit

median = df['Miles'].quantile(0.5) #getting Q2

for i,j in info: #using i,j here because of the output type of info list comprehension

    ax1.annotate(text = f"{i:.1f}", xy = (i,1), xytext = (i,1.4),fontsize = 12,
                 arrowprops= dict(arrowstyle="<-", lw=1, connectionstyle="arc,rad=0"))

    ax1.annotate(text = f"{j:.1f}", xy = (j,1), xytext = (j,1.4),fontsize = 12,
                 arrowprops= dict(arrowstyle="<-", lw=1, connectionstyle="arc,rad=0"))

#adding the median separately because it was included in info list
ax1.annotate(text = f"{median:.1f}",xy = (median,1),xytext = (median,0.6),fontsize = 12,
            arrowprops= dict(arrowstyle="<-", lw=1, connectionstyle="arc,rad=0"))

#removing y-axis ticks
ax1.set_yticks([])

#adding axis label
ax1.set_xlabel('Miles',fontweight = 'bold',fontsize = 12)


                                    #creating Miles group bar chart

ax2 = fig.add_subplot(gs[0,1])
temp = df['miles_group'].value_counts()
color_map = ["#3A7089", "#4b4b4c",'#99AEBB','#5C8374']
ax2.bar(x=temp.index,height = temp.values,color = color_map,zorder = 2)

#adding the value_counts
for i in temp.index:
    ax2.text(i,temp[i]+2,temp[i],{'font':'serif','size' : 10},ha = 'center',va = 'center')

#adding grid lines
ax2.grid(color = 'black',linestyle = '--', axis = 'y', zorder = 0, dashes = (5,10))

#removing the axis lines
for s in ['top','left','right']:
    ax2.spines[s].set_visible(False)

#adding axis label
ax2.set_ylabel('Count',fontweight = 'bold',fontsize = 12)
ax2.set_xticklabels(temp.index,fontweight = 'bold',rotation = 9)

#setting title for visual
ax2.set_title('Miles Group Distribution',{'font':'serif', 'size':15,'weight':'bold'})


                                        #creating a table for group info

ax3 = fig.add_subplot(gs[1,1])
miles_info = [['Light Activity','9%','0 to 50'],['Moderate Activity','54%','51 to 100'],['Active Lifestyle','34%','101 to 200'],
            ['Fitness Enthusiast','3%','Above 200']]
color_2d = [['#99AEBB','#FFFFFF','#FFFFFF'],["#3A7089",'#FFFFFF','#FFFFFF'],["#4b4b4c",'#FFFFFF','#FFFFFF'],
            ['#5C8374','#FFFFFF','#FFFFFF']]

table = ax3.table(cellText = miles_info, cellColours=color_2d, cellLoc='center',colLabels =['Activity','Probability','Miles'],
                  colLoc = 'center',bbox =[0, 0, 1, 1])

table.set_fontsize(11)

#removing axis
ax3.axis('off')


plt.show()

"""**üîç Insights**


Almost 88% of the customers plans to use the treadmill for 50 to 200 miles per week with a median of 94 miles per week.

**Outliers**

As we can see from the box plot, there are 8 outlier's present in the miles data

**Bivariate Analysis**

**üë®üèª‚Äçüíª Analysis of Product Type -- With Gender
"""

product_gender_counts = df.groupby(['Product', 'Gender']).size().unstack()

# Plotting
product_gender_counts.plot(kind='bar', color=['blue', 'green'])

plt.title('Product Preference by Gender')
plt.xlabel('Product')
plt.ylabel('Number of Customers')
plt.legend(title='Gender')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()
product_gender_counts

"""**üîç Insights**

KP781 treadmill is used more by male population who are rich

KP281 and KP481 is having marginal equal gender population usage

KP281 is maximum used.

**Analysis of Product type with Age**
"""

product_age_counts = df.groupby(['Product', 'age_group']).size().unstack()

# Plotting
product_age_counts.plot(kind='bar', color=['cyan', 'Turquoise', 'Blue','Orange'])

plt.title('Product Preference by Age')
plt.xlabel('Product')
plt.ylabel('Number of Customers')
plt.legend(title='Age')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()
product_age_counts

"""**üîç Insights**

Huge population of Youth and Adults use the treadmill effectively

The middle aged use less

The elders use the treadmill very less.

**Analysis of Product type with Education**
"""

product_education_counts = df.groupby(['Product', 'edu_group']).size().unstack()

# Plotting
product_education_counts.plot(kind='bar', color=['cyan', 'Turquoise', 'Blue','Orange'])

plt.title('Product Preference by Education')
plt.xlabel('Product')
plt.ylabel('Number of Customers')
plt.legend(title='Education')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()
product_education_counts

"""**üîç Insights**

The above graph shows very clearly that the population with higher education qualification are able to afford the treadmill.

The secondary education  qualification are the next to use the treadmill.

the primary education dont rely on treadmill, they use the hard things in life for day today living.

**Analysis of Product type with Income**
"""

product_income_counts = df.groupby(['Product', 'income_group']).size().unstack()

# Plotting
product_income_counts.plot(kind='bar', color=['cyan', 'Turquoise', 'Blue','Orange'])

plt.title('Product Preference by Income')
plt.xlabel('Product')
plt.ylabel('Number of Customers')
plt.legend(title='Income')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()
product_income_counts

"""**üîç Insights**

The Low income use KP281

Moderate income use all the treadmills but the population uses K281 and KP481 more

The high income  and very high income population use KP781 treadmill.

**Analysis of Product type with Marital status**
"""

product_marital_counts = df.groupby(['Product', 'MaritalStatus']).size().unstack()

# Plotting
product_marital_counts.plot(kind='bar', color=['blue', 'green'])

plt.title('Product Preference by Marital Status')
plt.xlabel('Product')
plt.ylabel('Number of Customers')
plt.legend(title='Marital Status')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()
product_marital_counts

"""**üîç Insights**

The partnered population are more health conscious than the Single status population.

**Analysis of Product type with Milage**
"""

product_miles_counts = df.groupby(['Product', 'miles_group']).size().unstack()

# Plotting
product_miles_counts.plot(kind='bar', color=['blue', 'green','olive','magenta'])

plt.title('Product Preference by miles')
plt.xlabel('Product')
plt.ylabel('Number of Customers')
plt.legend(title='miles')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()
product_miles_counts

"""**üîç Insights**

Moderate activity are using KP281 and KP481.

The active liefestyle population use KP781 more than KP281 and KP481

The Fitness enthusiast use KP781.

**Education group study with Gender**
"""

product_gender_edu_counts = df.groupby(['Gender', 'edu_group']).size().unstack()

# Plotting
product_gender_edu_counts.plot(kind='bar', color=['orange','olive','magenta'])

plt.title('Gender and education comparison')
plt.xlabel('Gender')
plt.ylabel('Population')
plt.legend(title='education')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()
product_gender_edu_counts

"""üîç Insights

Secondary education population has more female population

Higher education population has more male population

**Education group study with the product**
"""

product_product_edu_counts = df.groupby(['Product', 'edu_group']).size().unstack()

# Plotting
product_product_edu_counts.plot(kind='bar', color=['orange','olive','magenta'])

plt.title('Product and Education comparison')
plt.xlabel('Product')
plt.ylabel('Educated Population')
plt.legend(title='education')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()
product_product_edu_counts

"""**üîç Insights**

The Higher educated population use all the product.

**Product usage comparison with usage group**
"""

product_usage_counts = df.groupby(['Product', 'usage_group']).size().unstack()

# Plotting
product_usage_counts.plot(kind='bar', color=['blue','orange','olive'])

plt.title('Product and usage comparison')
plt.xlabel('Product')
plt.ylabel('Usages')
plt.legend(title='Usages')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()
product_usage_counts

"""**üîç Insights**


The medium usage population use KP281 and KP781 and the high usage population use KP781

**Product usage with Fitness group**
"""

product_fitness_counts = df.groupby(['Product', 'Fitness_group']).size().unstack()

# Plotting
product_fitness_counts.plot(kind='bar', color=['blue','orange','olive'])

plt.title('Product and Fitness comparison')
plt.xlabel('Product')
plt.ylabel('Fitness')
plt.legend(title='Fitness')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()
product_fitness_counts

"""**üîç Insights**

The most Fit population use KP781

The medium fit population is KP281 amd KP481.

**Usage group and Fitness group comparison**
"""

usage_fitness_counts = df.groupby(['usage_group', 'Fitness_group']).size().unstack()

# Plotting
usage_fitness_counts.plot(kind='bar', color=['blue','orange','olive'])

plt.title('Usage and Fitness comparison')
plt.xlabel('Usage')
plt.ylabel('Fitness')
plt.legend(title='Usage and fitness')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()
usage_fitness_counts

"""**üîç Insights**

The medium fitness population are maximum used treadmill population

The fitness enthusiast are the higher usage group

**Age Group and Fitness group comparison**
"""

age_fitness_counts = df.groupby(['age_group', 'Fitness_group']).size().unstack()

# Plotting
age_fitness_counts.plot(kind='bar', color=['blue','orange','olive'])

plt.title('Age and Fitness comparison')
plt.xlabel('Age')
plt.ylabel('Fitness')
plt.legend(title='Age and fitness')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()
age_fitness_counts

"""**üîç Insights**

The youth and Adult population have dense population in meidum fitness level


"""

age_fitness_counts = df.groupby(['age_group', 'Fitness_group']).size().unstack()

# Plotting
age_fitness_counts.plot(kind='bar', color=['blue','orange','olive'])

plt.title('Age and Fitness comparison')
plt.xlabel('Age')
plt.ylabel('Fitness')
plt.legend(title='Age and fitness')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()
age_fitness_counts

"""**Correlation between pair plots**




"""

import copy

df_copy = copy.deepcopy(df)

sns.pairplot(df_copy, hue ='Product', palette= 'YlGnBu')
plt.show()

"""**Heatmap**"""

df_copy.info()

numerical_df_copy = df_copy.select_dtypes(include = np.number)
corr_mat = numerical_df_copy.corr()

plt.figure(figsize=(15,6))

sns.heatmap(corr_mat,annot = True, cmap="YlGnBu")

plt.show()

"""**üîç Insights**


From the pair plot we can see Age and Income are positively correlated and heatmap also suggests a strong correlation betwwen them

Eductaion and Income are highly correlated as its obvious. Eductation also has significatnt correlation between Fitness rating and Usage of the treadmill.

Usage is highly correlated with Fitness and Miles as more the usage more the fitness and mileage.

**Computing probability - Marginal, Conditional probability**

** Probability of product purchase w.r.t. gender**
"""

pd.crosstab (index = df['Product'],columns = df['Gender'], margins = True, normalize = True).round(2)

"""**üîç Insights**


The Probability of a treadmill being purchased by a female is 42%.

The conditional probability of purchasing the treadmill model given that the customer is female is

--> For Treadmill model KP281 - 22%

--> For Treadmill model KP481 - 16%

--> For Treadmill model KP781 - 4%

--> The Probability of a treadmill being purchased by a male is 58%.

--> The conditional probability of purchasing the treadmill model given that the customer is male is -

--> For Treadmill model KP281 - 22%

--> For Treadmill model KP481 - 17%

--> For Treadmill model KP781 - 18%

**Probability of product purchase w.r.t. Age**
"""

pd.crosstab (index =df['Product'], columns = df['age_group'], margins = True, normalize = True).round(2)

"""**üîç Insights**


The Probability of a treadmill being purchased by a Young Adult(18-25) is 44%.

The conditional probability of purchasing the treadmill model given that the customer is Young Adult is

For Treadmill model KP281 - 19%

For Treadmill model KP481 - 16%

For Treadmill model KP781 - 9%

The Probability of a treadmill being purchased by a Adult(26-35) is 41%.

The conditional probability of purchasing the treadmill model given that the customer is Adult is -

For Treadmill model KP281 - 18%

For Treadmill model KP481 - 13%

For Treadmill model KP781 - 9%

The Probability of a treadmill being purchased by a Middle Aged(36-45) is 12%.

The Probability of a treadmill being purchased by a Elder(Above 45) is only 3%.

**Probability of product purchase w.r.t. Education level**
"""

pd.crosstab (index =df['Product'], columns = df['edu_group'], margins = True, normalize = True).round(2)

"""**üîç Insights**


The Probability of a treadmill being purchased by a customer with Higher Education(Above 15 Years) is 62%.

The conditional probability of purchasing the treadmill model given that the customer has Higher Education is

For Treadmill model KP281 - 23%

For Treadmill model KP481 - 18%

For Treadmill model KP781 - 21%

The Probability of a treadmill being purchased by a customer with Secondary Education(13-15 yrs) is 36%.

The conditional probability of purchasing the treadmill model given that the customer has Secondary Education is -

For Treadmill model KP281 - 21%

For Treadmill model KP481 - 14%

For Treadmill model KP781 - 1%

The Probability of a treadmill being purchased by a customer with Primary Education(0 to 12 yrs) is only 2%.

**Probability of product purchase w.r.t. income level**
"""

pd.crosstab (index =df['Product'], columns = df['income_group'], margins = True, normalize = True).round(2)

"""**üîç Insights**


The Probability of a treadmill being purchased by a customer with Low Income(<40k) is 18%.

The conditional probability of purchasing the treadmill model given that the customer has Low Income is -
For Treadmill model KP281 - 13%

For Treadmill model KP481 - 5%

For Treadmill model KP781 - 0%

The Probability of a treadmill being purchased by a customer with Moderate Income(40k - 60k) is 59%.

The conditional probability of purchasing the treadmill model given that the customer has Moderate Income is -
For Treadmill model KP281 - 28%

For Treadmill model KP481 - 24%

For Treadmill model KP781 - 6%

The Probability of a treadmill being purchased by a customer with High Income(60k - 80k) is 13%

The conditional probability of purchasing the treadmill model given that the customer has High Income is -

For Treadmill model KP281 - 3%

For Treadmill model KP481 - 4%

For Treadmill model KP781 - 6%

The Probability of a treadmill being purchased by a customer with Very High Income(>80k) is 11%

The conditional probability of purchasing the treadmill model given that the customer has High Income is -

For Treadmill model KP281 - 0%

For Treadmill model KP481 - 0%

For Treadmill model KP781 - 11%

**Probability of product purchase w.r.t. Marital Status**
"""

pd.crosstab (index =df['Product'], columns = df['MaritalStatus'], margins = True, normalize = True).round(2)

"""**üîç Insights**


The Probability of a treadmill being purchased by a Married Customer is 59%.

The conditional probability of purchasing the treadmill model given that the customer is Married is

For Treadmill model KP281 - 27%

For Treadmill model KP481 - 20%

For Treadmill model KP781 - 13%

The Probability of a treadmill being purchased by a Unmarried Customer is 41%.

The conditional probability of purchasing the treadmill model given that the customer is Unmarried is -

For Treadmill model KP281 - 18%

For Treadmill model KP481 - 13%

For Treadmill model KP781 - 9%
"""

pd.crosstab (index =df['Product'], columns = df['Usage'], margins = True, normalize = True).round(2)

"""**üîç Insights**


The Probability of a treadmill being purchased by a customer with Usage 3 per week is 38%.

The conditional probability of purchasing the treadmill model given that the customer has Usage 3 per week is -
For Treadmill model KP281 - 21%

For Treadmill model KP481 - 17%

For Treadmill model KP781 - 1%

The Probability of a treadmill being purchased by a customer with Usage 4 per week is 29%.

The conditional probability of purchasing the treadmill model given that the customer has Usage 4 per week is -
For Treadmill model KP281 - 12%

For Treadmill model KP481 - 7%

For Treadmill model KP781 - 10%

The Probability of a treadmill being purchased by a customer with Usage 2 per week is 18%

The conditional probability of purchasing the treadmill model given that the customer has Usage 2 per week is -
For Treadmill model KP281 - 11%

For Treadmill model KP481 - 8%

For Treadmill model KP781 - 0%

**Probability of product purchase w.r.t. Customer Fitness**
"""

pd.crosstab(index =df['Product'],columns = df['Fitness_group'],margins = True,normalize = True ).round(2)

"""**üîç Insights**


The Probability of a treadmill being purchased by a customer with Average(3) Fitness is 54%.

The conditional probability of purchasing the treadmill model given that the customer has Average Fitness is -
For Treadmill model KP281 - 30%

For Treadmill model KP481 - 22%

For Treadmill model KP781 - 2%

The Probability of a treadmill being purchased by a customer with Fitness of 2,4,5 is almost 15%.

The Probability of a treadmill being purchased by a customer with very low(1) Fitness is only 1%.

**Probability of product purchase w.r.t. weekly mileage**
"""

pd.crosstab(index =df['Product'],columns = df['miles_group'],margins = True,normalize = True ).round(2)

"""**üîç Insights**


The Probability of a treadmill being purchased by a customer with lifestyle of Light Activity(0 to 50 miles/week) is 9%.

The conditional probability of purchasing the treadmill model given that the customer has Light Activity Lifestyle is -

For Treadmill model KP281 - 7%

For Treadmill model KP481 - 3%

For Treadmill model KP781 - 0%

The Probability of a treadmill being purchased by a customer with lifestyle of Moderate Activity(51 to 100 miles/week) is 54%.

The conditional probability of purchasing the treadmill model given that the customer with lifestyle of Moderate Activity is -
For Treadmill model KP281 - 28%

For Treadmill model KP481 - 22%

For Treadmill model KP781 - 4%

The Probability of a treadmill being purchased by a customer has Active Lifestyle(100 to 200 miles/week) is 33%.

The conditional probability of purchasing the treadmill model given that the customer has Active Lifestyle is -
For Treadmill model KP281 - 10%

For Treadmill model KP481 - 8%

For Treadmill model KP781 - 15%

The Probability of a treadmill being purchased by a customer who is Fitness Enthusiast(>200 miles/week) is 3% only

**Customer Profiling**


Based on above analysis

Probability of purchase of KP281 = 44%

Probability of purchase of KP481 = 33%

Probability of purchase of KP781 = 22%

Customer Profile for KP281 Treadmill:

Age of customer mainly between 18 to 35 years with few between 35 to 50 years
Education level of customer 13 years and above
Annual Income of customer below USD 60,000
Weekly Usage - 2 to 4 times
Fitness Scale - 2 to 4
Weekly Running Mileage - 50 to 100 miles
Customer Profile for KP481 Treadmill:

Age of customer mainly between 18 to 35 years with few between 35 to 50 years
Education level of customer 13 years and above
Annual Income of customer between USD 40,000 to USD 80,000
Weekly Usage - 2 to 4 times
Fitness Scale - 2 to 4
Weekly Running Mileage - 50 to 200 miles
Customer Profile for KP781 Treadmill:

Gender - Male
Age of customer between 18 to 35 years
Education level of customer 15 years and above
Annual Income of customer USD 80,000 and above
Weekly Usage - 4 to 7 times
Fitness Scale - 3 to 5
Weekly Running Mileage - 100 miles and above

**Recommendations**


Marketing Campaigns for KP781

The KP784 model exhibits a significant sales disparity in terms of gender, with only 18% of total sales attributed to female customers. To enhance this metric, it is recommended to implement targeted strategies such as offering special promotions and trials exclusively designed for the female customers.
Affordable Pricing and Payment Plans

Given the target customer's age, education level, and income, it's important to offer the KP281 and KP481 Treadmill at an affordable price point. Additionally, consider providing flexible payment plans that allow customers to spread the cost over several months. This can make the treadmill more accessible to customers with varying budgets.
User-Friendly App Integration

Create a user-friendly app that syncs with the treadmill. This app could track users' weekly running mileage, provide real-time feedback on their progress, and offer personalized recommendations for workouts based on their fitness scale and goals.This can enhance the overall treadmill experience and keep users engaged.
"""